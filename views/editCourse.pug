extends layout

block content
  .container
    h1 Edit Course
    form#editCourseForm(method="POST" action=`/api/v1/courses/${course._id}?_method=PUT`)
      // Step 1
      .form-step#step1
        .form-group
          label(for="title") Course Title
          input#title.form-control(type="text" name="title" required value=course.title)
        .form-group
          label(for="description") Description
          textarea#description.form-control(name="description" rows="4" required)= course.description
        button.btn.btn-primary(type="button" id="nextBtn1") Next

      // Step 2
      .form-step#step2(style="display:none;")
        .form-group
          label(for="weeks") Duration (weeks)
          input#weeks.form-control(type="number" name="weeks" min="1" required value=course.weeks)
        .form-group
          label(for="tuition") Tuition Cost
          input#tuition.form-control(type="number" name="tuition" min="0" required value=course.tuition)
        button.btn.btn-secondary(type="button" id="prevBtn2") Previous
        button.btn.btn-primary(type="button" id="nextBtn2") Next

      // Step 3
      .form-step#step3(style="display:none;")
        .form-group
          label(for="minimumSkill") Minimum Skill Required
          select#minimumSkill.form-control(name="minimumSkill" required)
            option(value="beginner" selected=course.minimumSkill=='beginner') Beginner
            option(value="intermediate" selected=course.minimumSkill=='intermediate') Intermediate
            option(value="advanced" selected=course.minimumSkill=='advanced') Advanced
        .form-group
          label.checkbox-label
            input#scholarshipsAvailable(type="checkbox" name="scholarshipsAvailable" checked=course.scholarshipsAvailable)
            span Scholarships Available
        button.btn.btn-secondary(type="button" id="prevBtn3") Previous
        button.btn.btn-primary(type="button" id="nextBtn3") Next

      // Step 4 - Modules and Lessons
      .form-step#step4(style="display:none;")
        #modules-container
          h3 Modules
          button.btn.btn-sm.btn-success(type="button" id="addModuleBtn") Add Module
          // Existing modules will be populated by JS
        button.btn.btn-secondary(type="button" id="prevBtn4") Previous
        button.btn.btn-primary(type="submit") Update Course

  script(src="/js/courseForm.js")
  script.
    document.addEventListener('DOMContentLoaded', () => {
      const modulesContainer = document.getElementById('modules-container');
      const courseModules = !{JSON.stringify(course.modules)};

      function createLessonForm(moduleIndex, lessonIndex, lessonData) {
        const lessonDiv = document.createElement('div');
        lessonDiv.classList.add('lesson');
        lessonDiv.style.border = '1px solid #ccc';
        lessonDiv.style.padding = '10px';
        lessonDiv.style.marginBottom = '10px';

        lessonDiv.innerHTML = `
          <h5>Lesson ${lessonIndex + 1}</h5>
          <div class="form-group">
            <label>Lesson Title</label>
            <input type="text" name="module_${moduleIndex}_lesson_${lessonIndex}_title" class="form-control" required value="${lessonData.title || ''}">
          </div>
          <div class="form-group">
            <label>Lesson Text</label>
            <textarea name="module_${moduleIndex}_lesson_${lessonIndex}_text" class="form-control" rows="3" required>${lessonData.text || ''}</textarea>
          </div>
          <div class="form-group">
            <label>Lesson Video URL</label>
            <input type="text" name="module_${moduleIndex}_lesson_${lessonIndex}_video" class="form-control" required value="${lessonData.video || ''}">
          </div>
          <button type="button" class="btn btn-danger btn-sm remove-lesson-btn">Remove Lesson</button>
        `;

        lessonDiv.querySelector('.remove-lesson-btn').addEventListener('click', () => {
          lessonDiv.remove();
        });

        return lessonDiv;
      }

      function createModuleForm(moduleIndex, moduleData) {
        const moduleDiv = document.createElement('div');
        moduleDiv.classList.add('module');
        moduleDiv.style.border = '2px solid #000';
        moduleDiv.style.padding = '15px';
        moduleDiv.style.marginBottom = '20px';

        moduleDiv.innerHTML = `
          <h4>Module ${moduleIndex + 1}</h4>
          <div class="form-group">
            <label>Module Title</label>
            <input type="text" name="module_${moduleIndex}_title" class="form-control" required value="${moduleData.title || ''}">
          </div>
          <div class="lessons-container"></div>
          <button type="button" class="btn btn-primary btn-sm add-lesson-btn">Add Lesson</button>
          <button type="button" class="btn btn-danger btn-sm remove-module-btn">Remove Module</button>
        `;

        const lessonsContainer = moduleDiv.querySelector('.lessons-container');
        const addLessonBtn = moduleDiv.querySelector('.add-lesson-btn');
        const removeModuleBtn = moduleDiv.querySelector('.remove-module-btn');

        let lessonCount = 0;

        if (moduleData.lessons && moduleData.lessons.length > 0) {
          moduleData.lessons.forEach((lesson) => {
            lessonsContainer.appendChild(createLessonForm(moduleIndex, lessonCount, lesson));
            lessonCount++;
          });
        } else {
          lessonsContainer.appendChild(createLessonForm(moduleIndex, lessonCount, {}));
          lessonCount++;
        }

        addLessonBtn.addEventListener('click', () => {
          lessonsContainer.appendChild(createLessonForm(moduleIndex, lessonCount, {}));
          lessonCount++;
        });

        removeModuleBtn.addEventListener('click', () => {
          moduleDiv.remove();
        });

        return moduleDiv;
      }

      if (modulesContainer) {
        courseModules.forEach((moduleData, index) => {
          modulesContainer.insertBefore(createModuleForm(index, moduleData), document.getElementById('addModuleBtn'));
        });
      }
    });
